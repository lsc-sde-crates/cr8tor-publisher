"""Contains the FastAPI application and its endpoints."""

from typing import Any

from fastapi import FastAPI

from . import auth, config

API_KEY_NAME = "access_token"

SHOW_DOCS_ENVIRONMENT = ("local", "dev")  # explicit list of allowed envs

app_config: dict[str, Any] = {"title": config.get_settings().app_name}

if config.get_settings().environment not in SHOW_DOCS_ENVIRONMENT:
    app_config["openapi_url"] = ""

app = FastAPI(**app_config)


@app.get("/")
def read_root(
    settings: config.SettingsDependency,
    _: auth.AuthDependency,
) -> dict[str, str]:
    """Root endpoint that returns a greeting message."""
    return {"Hello": "World from " + settings.app_name}


@app.get("/items/{item_id}")
def read_item(
    item_id: int,
    _: auth.AuthDependency,
) -> dict[str, Any]:
    """Endpoint to read an item by its ID."""
    return {"item_id": item_id}


@app.get("/items")
async def list_items(
    _: auth.AuthDependency,
) -> list[dict[str, Any]]:
    """Endpoint to list all items."""
    # For demo purposes returning static list
    # In real app would fetch from database
    return [
        {"item_id": 1, "name": "Item 1"},
        {"item_id": 2, "name": "Item 2"},
        {"item_id": 3, "name": "Item 3"},
    ]


@app.post("/items")
async def create_item(
    item: dict[str, Any],
    _: auth.AuthDependency,
) -> dict[str, Any]:
    """Endpoint to create a new item.

    Args:
        item: The item data to create
        _: Authentication dependency

    Returns:
        The created item with generated ID

    """
    # For demo purposes returning static response
    # In real app would insert into database and return created item
    return {
        "item_id": 4,  # Would be generated by DB
        "name": item.get("name", ""),
        **item,
    }
